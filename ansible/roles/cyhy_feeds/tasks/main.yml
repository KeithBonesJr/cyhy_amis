---
# tasks file for cyhy_feeds

- name: Create cyhy-feeds config
  copy:
    content: "{{ lookup('aws_ssm', '/cyhy/feeds/config') }}"
    dest: "/var/cyhy/scripts/cyhy-feeds/cyhy-data-extract.cfg"
    mode: 0444
    owner: cyhy
    group: cyhy

#
# Create the AWS config
#
- name: Create the AWS config
  copy:
    dest: /var/cyhy/scripts/cyhy-feeds/aws_config
    owner: cyhy
    group: cyhy
    mode: 0440
    content: |
      [default]
      region = {{ aws_region }}

      [profile elasticsearch]
      region = {{ dmarc_import_aws_region }}

#
# Import keys and trust
#

# The --batch flag makes sure that gpg2 doesn't attempt to do anything
# interactive.
- name: Import gpg keys
  shell: "echo '{{ item }}' | gpg2 --trustdb-name /var/cyhy/.gnupg/trustdb.gpg --import --batch"
  become_user: cyhy
  vars:
    ansible_ssh_pipelining: yes
  loop:
    - "{{ lookup('aws_ssm', '/cyhy/feeds/gpg/public') }}"
    - "{{ lookup('aws_ssm', '/cyhy/feeds/gpg/private') }}"
    - "{{ lookup('aws_ssm', '/cyhy/feeds/gpg/nsd_public') }}"
  loop_control:
    label: "<key redacted>"

- name: Import gpg trust
  shell: "echo {{ lookup('aws_ssm', '/cyhy/feeds/gpg/trust') }} | gpg2 --import-ownertrust --batch"
  become_user: cyhy
  vars:
    ansible_ssh_pipelining: yes

#
# Create /etc/cyhy/cyhy.conf file
#

- name: Create /etc/cyhy directory
  file:
    path: /etc/cyhy
    state: directory

#
# Set up /etc/cyhy/cyhy.conf with commander and scan-reader creds
#
# This is a little messy.  The real solution is to just create a
# cyhy.conf with credentials for each user in mongo_users.other_users.
# That will cause some heartburn, though, since the credential
# sections will have to be named using the MongoDB username.  That
# will necessitate some changes elsewhere in the code where named
# sections from cyhy.conf are explicitly referenced.
- name: Check if cyhy.conf already exists
  stat:
    path: /etc/cyhy/cyhy.conf
  register: cyhy_conf_result

- name: Create cyhy.conf (with scan-reader credentials) if it doesn't exist
  copy:
    dest: /etc/cyhy/cyhy.conf
    owner: cyhy
    group: cyhy
    mode: 0660
    content: |
      [DEFAULT]
      default-section = production
      database-uri = mongodb://database1.cyhy:27017/
      report-key =

      ; BEGIN ANSIBLE MANAGED BLOCK commander
      [production]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/commander/database') }}
      ; END ANSIBLE MANAGED BLOCK commander

      ; BEGIN ANSIBLE MANAGED BLOCK scan-reader
      [production_scan_reader]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/database') }}
      ; END ANSIBLE MANAGED BLOCK scan-reader

      ; BEGIN ANSIBLE MANAGED BLOCK assessment-reader
      [production_assessment_reader]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/database') }}
      ; END ANSIBLE MANAGED BLOCK assessment-reader
  when: cyhy_conf_result.stat.exists == False

# This should be changed in the future to use a read-only Mongo user.
- name: Add commander credentials block to cyhy.conf if necessary
  blockinfile:
    path: /etc/cyhy/cyhy.conf
    marker: '; {mark} ANSIBLE MANAGED BLOCK commander'
    block: |
      [production]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/commander/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/commander/database') }}
  when: cyhy_conf_result.stat.exists == True

- name: Add scan-reader credentials block to cyhy.conf if necessary
  blockinfile:
    path: /etc/cyhy/cyhy.conf
    marker: '; {mark} ANSIBLE MANAGED BLOCK scan-reader'
    block: |
      [production_scan_reader]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/scan-reader/database') }}
  when: cyhy_conf_result.stat.exists == True

- name: Add assessment-reader credentials block to cyhy.conf if necessary
  blockinfile:
    path: /etc/cyhy/cyhy.conf
    marker: '; {mark} ANSIBLE MANAGED BLOCK assessment-reader'
    block: |
      [production_assessment_reader]
      database-uri = mongodb://{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/user') }}:{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/password') }}@database1.cyhy:27017/{{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/database') }}
      database-name = {{ lookup('aws_ssm', '/cyhy/mongo/users/assessment-read/database') }}
  when: cyhy_conf_result.stat.exists == True
#
# Create a cron job to run the extract script nightly at 0815 (UTC) as
# cyhy
#
- name: Set up nightly cron job to sync NSD data for MOE extract
  cron:
    name: Nightly cyhy extract
    hour: 08
    minute: 15
    user: cyhy
    job: cd /var/cyhy/scripts/cyhy-feeds && export AWS_CONFIG_FILE=/var/cyhy/scripts/cyhy-feeds/aws_config; python2.7 /var/cyhy/scripts/cyhy-feeds/cyhy-data-extract.py --cyhy_section production --scan_section production_scan_reader --assessment_section production_assessment_reader --aws --config /var/cyhy/scripts/cyhy-feeds/cyhy-data-extract.cfg 2>&1 | /usr/bin/logger -t cyhy-feeds
  when: production_workspace

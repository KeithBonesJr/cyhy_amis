---
# tasks file for nessus

#
# Check if a license key is registered and if not register one
#
- name: Check if a license key is registered
  command: /opt/nessus/sbin/nessuscli fetch --check
  register: registered
  failed_when: registered.rc not in [0, 1]

- name: Retrieve the license key if one is registered
  block:
    - name: Get the registered license key
      command: /opt/nessus/sbin/nessuscli fetch --code-in-use
      register: key_result

    - name: Extract the key in use
      set_fact:
        registered_key: "{{ key_result.stdout | regex_search(regexp, '\\1') }}"
      vars:
        # Looking for key in format:
        # XXXX-XXXX-XXXX-XXXX or XXXX-XXXX-XXXX-XXXX-XXXX
        regexp: '([a-zA-Z0-9]{4}(?:\-[a-zA-Z0-9]{4}){3,4})'

    - name: See if the key in use matches the provided one
      set_fact:
        # regex_search() returns a list so we want to compare the one element
        matching_key: "{{ nessus_activation_code == registered_key[0] }}"
  when: registered.rc == 0

- name: Register a license key, setup user, and update plugins if necessary
  block:
    - name: Stop the Nessus service
      service:
        name: nessusd
        state: stopped

    - name: Register a license key
      command: "/opt/nessus/sbin/nessuscli fetch --register-only {{ nessus_activation_code }}"

    #
    # Create the Nessus scanner user
    #
    - name: Grab the existing Nessus users
      command: /opt/nessus/sbin/nessuscli lsuser
      register: users

    # The expect Ansible module requires pexpect
    - name: Install pexpect
      pip:
        name:
          - pexpect
      when: username not in users.stdout

    - name: Create scanner user if necessary
      expect:
        command: "/opt/nessus/sbin/nessuscli adduser {{ username }}"
        responses:
          password: "{{ password }}"
          administrator: y
          BLANK: ""
      when: username not in users.stdout

    - name: Update plugins
      command: /opt/nessus/sbin/nessuscli update --plugins-only
      async: 300
      poll: 5

    - name: Rebuild the plugin database
      command: /opt/nessus/sbin/nessusd -R
      async: 1800
      poll: 30

    - name: Start Nessus service
      service:
        name: nessusd
        state: started
  when: registered.rc != 0 or not matching_key|default(false)|bool

- name: Create /etc/cyhy directory
  file:
    path: /etc/cyhy
    state: directory
    owner: cyhy
    group: cyhy
    mode: 0750

- name: Create the configuration file for Nessus API access
  template:
    src: nessus_api.yml.j2
    dest: /etc/cyhy/nessus_api.yml
    owner: cyhy
    group: cyhy
    mode: 0640

- name: Copy the nessus_base.py Python file for configuring Nessus
  copy:
    src: nessus_base.py
    dest: /tmp/nessus_base.py
    mode: 0644

- name: Copy base Nessus scan policy to instance tmp
  template:
    src: cyhy-base-nessus8-policy.xml.j2
    dest: /tmp/cyhy-base-nessus8-policy.xml

- name: Wait for Nessus port to be open
  wait_for:
    port: 8834

- name: Run Nessus configuration script
  command: python3 /tmp/nessus_base.py

#
# Clean up
#
- name: Delete /tmp/cyhy-base-nessus8-policy.xml
  file:
    path: /tmp/cyhy-base-nessus8-policy.xml
    state: absent

- name: Delete /tmp/nessus_base.py
  file:
    path: /tmp/nessus_base.py
    state: absent
